                    arrayDataChar = arrayDataChar.join('')
                    let res = arrayDataChar.split("#")

                    coilOneData = res[0]
                    coilTwoData = res[1]
                    userVoltageData = res[2]
                    console.log(this.props.token)
                    console.log(this.state.pickerValue)
                    this.setState({
                      dataDoubleVoltage: userVoltageData,
                      dataDoubleVoltageCoilOne: coilOneData,
                      dataDoubleVoltageCoilTwo: coilTwoData,
                    })

                    /* We are getting the data that the Microcontroller is sending and converting to a string chain from the
                    Unicode numbers then by means of .join ('') we are deleting the commas and turning the list into one single
                    element and sending that data to the state as a single value */
/*                     try {
                      let userData = this.state.userData
                      userData[0].voltage = this.state.dataDoubleVoltage
                      userData[0].coilOneData = this.state.dataDoubleVoltageCoilOne
                      userData[0].coilTwoData = this.state.dataDoubleVoltageCoilTwo
                      userData[0].id = this.state.userID
                      this.setState({
                        userData
                      })

                      AsyncStorage.getItem('databaseTest').then((value) => {
                        if (this.state.status && this.dataFlag) {
                          if (value !== null) {
                            const existingData = JSON.parse(value)
                            existingData.push(this.state.userData)
                            const headers = Object.keys(existingData[0])
                            for (const row of existingData) {
                              const values = headers.map(header => {
                                return row[header]
                              })
                              this.datRows.push(values)
                              this.sendDataToServer(row.voltage, row.coilOneData, row.coilTwoData, row.id, null, this.state.pickerValue)
                              this.refs.toast.show('Dato enviado 1', DURATION.LENGTH_LONG);
                            }
                            this.removeItemValue()
                            NetInfo.isConnected.addEventListener('connectionChange', this.handleConnectionChange);
                            NetInfo.isConnected.fetch().done(
                              (isConnected) => { this.setState({ status: isConnected }); }
                            )
                            console.log('Base de datos local no vacía enviando todos los datos')
                            this.refs.toast.show('Dato enviado 2', DURATION.LENGTH_LONG);
                          } else {
                              this.sendDataToServer(this.state.dataDoubleVoltage, this.state.dataDoubleVoltageCoilOne, this.state.dataDoubleVoltageCoilTwo, this.state.userID, date, this.state.pickerValue)
                              this.removeItemValue()
                              console.log('Base de datos local vacía enviando dato')
                              counter = counter -1
                            NetInfo.isConnected.addEventListener('connectionChange', this.handleConnectionChange)
                            NetInfo.isConnected.fetch().done(
                              (isConnected) => { this.setState({ status: isConnected }) }
                            )
                          }
                        } else if (!this.state.status && this.dataFlag) {
                          if (value !== null) {
                            const existingData = JSON.parse(`{
                              "voltage_coil_1": ${this.state.dataDoubleVoltageCoilOne},
                              "voltage_coil_2": ${this.state.dataDoubleVoltageCoilTwo},
                              "voltage_generated_by_user": ${this.state.dataDoubleVoltage},
                              "activity": ${this.state.pickerValue},
                            }`)
                            existingData.push(this.state.userData[0])
                            AsyncStorage.setItem('databaseTest', JSON.stringify(existingData)).then(() => {
                              console.log('No hay conexión base de datos local no vacía ' + this.state.status)
                              this.refs.toast.show('Dato NO enviado 1', DURATION.LENGTH_LONG);
                            })
                            NetInfo.isConnected.addEventListener('connectionChange', this.handleConnectionChange);
                            NetInfo.isConnected.fetch().done(
                              (isConnected) => { this.setState({ status: isConnected }) }
                            );
                          } else {
                            AsyncStorage.setItem('databaseTest', JSON.stringify(this.state.userData)).then(() => {
                              console.log('No hay conexión base de datos local vacía ' + this.state.status)
                              this.refs.toast.show('Dato NO enviado 2', DURATION.LENGTH_LONG);
                            })
                            NetInfo.isConnected.addEventListener('connectionChange', this.handleConnectionChange);
                            NetInfo.isConnected.fetch().done(
                              (isConnected) => {
                                this.setState({ status: isConnected });
                              }
                            );
                          }
                        } else {
                          console.log('Por favor presiona el check para empezar el envío de datos')
                        }
                      })
                    } catch (error) {
                      this.refs.toast.show(error, DURATION.LENGTH_LONG);
                    } */